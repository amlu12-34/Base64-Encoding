<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Base64 Encoder / Decoder</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap');

        :root {
            --primary-color: #3b82f6;
            --secondary-color: #10b981;
            --bg-color: #f8fafc;
            --card-color: #ffffff;
            font-family: 'Inter', sans-serif;
        }

        body {
            background-color: var(--bg-color);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        textarea::-webkit-scrollbar { width: 8px; }
        textarea::-webkit-scrollbar-track { background: var(--bg-color); border-radius: 10px; }
        textarea::-webkit-scrollbar-thumb { background: #cbd5e1; border-radius: 10px; }
        textarea::-webkit-scrollbar-thumb:hover { background: #94a3b8; }
    </style>
</head>
<body class="p-4">

    <div class="w-full max-w-3xl bg-white shadow-2xl rounded-xl p-6 md:p-10 border border-gray-100 transition-all duration-300">
        <h1 class="text-3xl font-extrabold text-gray-800 mb-2 text-center">
            Base64 Converter
        </h1>
        <p class="text-center text-gray-500 mb-6">
            Encode and decode text securely.
        </p>

        <div class="mb-6">
            <label for="text-input" id="label-status" class="block text-sm font-medium text-gray-700 mb-2 transition-colors duration-200">
                Enter Text or Base64 String:
            </label>
            <textarea
                id="text-input"
                rows="8"
                class="w-full p-4 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-blue-500 outline-none text-gray-700 text-base resize-none transition-shadow shadow-md hover:shadow-lg"
                placeholder="Type your text here to encode, or a Base64 string to decode..."
                oninput="clearStatus()"
            ></textarea>
        </div>

        <div class="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4">
            <button
                id="encode-btn"
                onclick="processText('encode')"
                class="flex-1 px-6 py-3 text-lg font-semibold text-white bg-blue-600 rounded-lg shadow-md hover:bg-blue-700 transition duration-150 ease-in-out transform hover:scale-[1.02] active:scale-[0.98] focus:outline-none focus:ring-4 focus:ring-blue-300"
            >
                Encode to Base64
            </button>

            <button
                id="decode-btn"
                onclick="processText('decode')"
                class="flex-1 px-6 py-3 text-lg font-semibold text-white bg-emerald-600 rounded-lg shadow-md hover:bg-emerald-700 transition duration-150 ease-in-out transform hover:scale-[1.02] active:scale-[0.98] focus:outline-none focus:ring-4 focus:ring-emerald-300"
            >
                Decode from Base64
            </button>
        </div>
        
        <div id="status-message" class="mt-6 p-3 rounded-lg text-center font-medium min-h-[40px] flex items-center justify-center transition-all duration-300 opacity-0">
            
        </div>

    </div>

    <script>
        const inputEl = document.getElementById('text-input');
        const statusEl = document.getElementById('status-message');
        const labelEl = document.getElementById('label-status');

        const successClass = 'bg-green-100 text-green-800 border-green-400 opacity-100';
        const errorClass = 'bg-red-100 text-red-800 border-red-400 opacity-100';
        const labelNormalClass = 'text-gray-700';
        const labelSuccessClass = 'text-green-600';
        const labelErrorClass = 'text-red-600';

        function clearStatus() {
            statusEl.classList.remove(...successClass.split(' '), ...errorClass.split(' '));
            statusEl.classList.add('opacity-0');
            statusEl.textContent = '';
            labelEl.classList.remove(labelSuccessClass, labelErrorClass);
            labelEl.classList.add(labelNormalClass);
        }

        function showStatus(message, type) {
            clearStatus();
            statusEl.textContent = message;
            
            const classes = type === 'success' ? successClass : errorClass;
            const labelClass = type === 'success' ? labelSuccessClass : labelErrorClass;

            statusEl.classList.remove('opacity-0');
            statusEl.classList.add(...classes.split(' '), 'border');
            labelEl.classList.remove(labelNormalClass);
            labelEl.classList.add(labelClass);

            setTimeout(clearStatus, 5000);
        }

        function encodeBase64(text) {
            return btoa(unescape(encodeURIComponent(text)));
        }

        function decodeBase64(base64) {
            return decodeURIComponent(escape(atob(base64)));
        }

        function processText(mode) {
            const input = inputEl.value.trim();

            if (!input) {
                showStatus("Please enter some text or a Base64 string first.", 'error');
                return;
            }

            try {
                let output;
                let message;
                
                if (mode === 'encode') {
                    output = encodeBase64(input);
                    message = 'Successfully encoded to Base64!';
                } else if (mode === 'decode') {
                    if (!/^[a-zA-Z0-9+/=\s]*$/.test(input)) {
                        throw new Error('Input contains characters not valid in standard Base64.');
                    }
                    output = decodeBase64(input);
                    message = 'Successfully decoded the Base64 string!';
                }

                inputEl.value = output;
                showStatus(message, 'success');

            } catch (e) {
                console.error("Processing Error:", e);
                let errorMessage = 'An error occurred during conversion.';
                if (e.message.includes('Invalid character')) {
                    errorMessage = 'Decoding failed: The input is not a valid Base64 string.';
                } else if (e.message.includes('Input contains characters not valid')) {
                    errorMessage = 'Invalid input: Please ensure you are only using valid Base64 characters (A-Z, a-z, 0-9, +, /, and =).';
                }
                showStatus(errorMessage, 'error');
            }
        }
    </script>
</body>
</html>
